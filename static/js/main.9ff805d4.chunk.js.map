{"version":3,"sources":["component/post/post-utils.ts","component/post/post-modal/PostModal.tsx","component/post/post-form/PostForm.tsx","component/post/Post.tsx","component/blog/Blog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EMPTY_POST_ARRAY","EMPTY_POST","title","content","author","PostModal","props","React","loadedPost","setLoadedPost","id","fetch","method","mode","then","response","status","json","post","console","log","catch","error","show","className","onClick","close","PostForm","setPost","onChange","value","key","postUpdated","type","event","target","rows","body","JSON","stringify","Post","onclick","Blog","posts","setPosts","selectedId","setSelectedId","toggle","setToggle","length","postsAuthor","slice","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9ff805d4.chunk.js","sourcesContent":["export interface IPost {\n    title : string,\n    content: string,\n    author: string,\n    id? : number,\n    onclick? : any,\n}\n\nexport const EMPTY_POST_ARRAY : Array<IPost> = [];\nexport const EMPTY_POST : IPost = {title : '', content : '', author : ''};\nexport const NO_ID : any = null;","import * as React from 'react';\nimport './PostModal.css'\nimport { EMPTY_POST } from '../post-utils';\n\nexport interface IPostModalProps {\n  id : any,\n  close : any,\n  show : boolean\n}\n\nexport default function PostModal (props: IPostModalProps) {\n  let [loadedPost, setLoadedPost] = React.useState(EMPTY_POST)\n  React.useEffect(() => {\n    if (props.id !== null) {\n      if (!loadedPost.id || loadedPost.id !== props.id) {\n        fetch(`https://jsonplaceholder.typicode.com/posts/${props.id}`,\n          { \n            method: 'GET',\n            mode: 'cors'\n          }\n        ).then(response => {\n          if (response.status === 200) {\n              return response.json();\n          }\n        }).then((post) => {\n          console.log(post);\n          setLoadedPost(post);\n        }).catch(() => {\n          console.error('Error');\n        });\n      }\n    }\n  }); \n  return (\n    props.id !== null && props.show ? (\n    <div className=\"post-full\">\n        <h1>{loadedPost.title}</h1>\n        <p>{loadedPost.content}</p>\n\n        <button className=\"btn btn-danger my-3 btn-post\" onClick={props.close}>Close</button>\n    \n    </div>) : null\n  );\n}\n","import * as React from 'react';\nimport './PostForm.css';\nimport { IPost, EMPTY_POST } from '../post-utils';\n\nexport interface IPostFormProps {\n}\n\nexport default function PostForm (props: IPostFormProps) {\n    let postExample : IPost = {\n        title: '',\n        content: '',\n        author: 'Hugo'\n    }\n    let [post, setPost] = React.useState(postExample);\n\n    const onChange = (value : string, key : string) => {\n        let postUpdated : any = {...post};\n        postUpdated[key] = value;\n        setPost(postUpdated);\n    };\n    const postArticle = (event : any) => {\n        fetch(`https://jsonplaceholder.typicode.com/posts/`,\n          { \n            method: 'POST',\n            mode: 'cors',\n            body : JSON.stringify(post)\n          }\n        ).then(response => {\n          if (response.status === 201) {\n              return response.json();\n          }\n        }).then((post) => {\n          console.log(post);\n        }).catch(() => {\n          console.error('Error');\n        });\n        setPost(EMPTY_POST);\n    };\n  return (\n    <div className=\"post-form form-group\">\n        <h1>Add an Article</h1>\n        <label>Title</label>\n        <input className=\"form-control\" type=\"text\" value={post.title} onChange={(event) => onChange(event.target.value, 'title')} />\n        <label>Content</label>\n        <textarea className=\"form-control\" rows={4} value={post.content} onChange={(event) => onChange(event.target.value, 'content')} />\n        <label>Author</label>\n        <select className=\"form-control\" value= {post.author} onChange={(event) => onChange(event.target.value, 'author')}>\n            <option value=\"Hugo\">Hugo</option>\n            <option value=\"Juliette\">Juliette</option>\n            <option value=\"John\">John</option>\n        </select>\n        <button className=\"btn btn-success my-3\" onClick={postArticle}>Add an article</button>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport './Post.css'\nimport { IPost } from './post-utils';\n\n\nexport default function Post (props: IPost) {\n  return (\n    <article className=\"post\" onClick={props.onclick}>\n        <h1>{props.title}</h1>\n        <div>\n            <div className=\"author\">{props.author}</div>\n        </div>\n    </article>\n  );\n}\n","import * as React from 'react';\nimport './Blog.css'\nimport PostModal from '../post/post-modal/PostModal';\nimport PostForm from '../post/post-form/PostForm';\nimport { EMPTY_POST_ARRAY, IPost, NO_ID } from '../post/post-utils';\nimport Post from '../post/Post';\n\nexport interface IBlogProps {\n}\n\nexport default function Blog (props: IBlogProps) {\n    let [posts, setPosts] = React.useState(EMPTY_POST_ARRAY);\n    let [selectedId, setSelectedId] = React.useState(NO_ID);\n    let [toggle, setToggle] = React.useState(false);\n\n    React.useEffect(() => {\n        if (posts.length === 0) {\n            fetch('https://jsonplaceholder.typicode.com/posts',\n                { \n                    method: 'GET',\n                    mode: 'cors'\n                }\n            ).then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                }\n            }).then((posts) => {\n                console.log(posts);\n                const postsAuthor = posts.slice(0,4).map((post : any) => {\n                    return {...post, author : 'Hugo'};\n                });\n                setPosts(postsAuthor);\n            }).catch(() => {\n                console.error('Error');\n            });\n        }\n    });\n    const selectId = (id : any) => {\n        setSelectedId(id);\n        setToggle(true);\n    };\n    const toggleModale = () => {\n        setToggle(false);\n    };\n  return (\n    <div>\n        <section>\n        <PostForm />\n        </section>\n        <h2 className=\"text-center my-5\">Select a post ...</h2>\n        <PostModal id={selectedId} \n                        close={toggleModale}\n                        show={toggle}/>\n        <section className=\"Posts\">\n            {\n                posts.map((post :IPost) => {\n                    return (\n                    <Post \n                        key={post.id}\n                        title={post.title} \n                        author={post.author} \n                        content={post.content}\n                        onclick={() => {selectId(post.id)}}\n                    />)\n                })\n            }\n        </section>\n    </div>\n  );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport Blog from './component/blog/Blog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Blog/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}